[PATH]

root = /Users/jianpenghou/Github/smp-eupt-2018/

data = %(root)s/data/
raw = %(data)s/raw/
feature = %(data)s/feature/
out = %(data)s/out/
index = %(data)s/index/

[PRE]

index_generator = {
    'cv_num': 5,
    'index_name': 'r0',
    }

[STATISTICS]

n_gram_df = {
    'n': 2,
    'min_doc_frequency': 100,
    }

n_gram_entropy = {
    'n': 2,
    'min_doc_frequency': 100,
    }

[EXTRACTOR]

char_entropy_summary = {
    'min_doc_frequency': 100,
    }

char_entropy_average = {
    'min_doc_frequency': 100,
    }

char_probability_summary = {
    'min_doc_frequency': 400,
    }

char_probability_average = {
    'min_doc_frequency': 400,
    }

char_probability_softmax = {
    'min_doc_frequency': 300,
    }

char_probability_normalization = {
    'min_doc_frequency': 300,
    }

n_gram_entropy_summary = {
    'n': 2,
    'min_doc_frequency': 100,
    }

n_gram_entropy_average = {
    'n': 2,
    'min_doc_frequency': 100,
    }

n_gram_probability_summary = {
	'n': 2,
	'min_doc_frequency': 100,
	}
n_gram_probability_average = {
	'n': 2,
	'min_doc_frequency': 100,
	}

n_gram_probability_normalization = {
	'n': 2,
	'min_doc_frequency': 100,
	}

[EXPERIMENT]

# auto generate
tag =

index_name = r0

feature =
    content_length
    word_num
    word_set_num_3
    chinese_char_ratio
    digit_char_ratio
    english_char_ratio
    char_set_ratio
    word_ratio_3
    ave_chinese_continuous_length
    space_num
    space_ratio
    last_char_is_dot
    last_char_is_chinese
    contain_word_location
    contain_char_dian
    contain_char_bao
    char_entropy_summary_100
    char_entropy_average_100
    char_probability_summary_400
    char_probability_average_400
    char_probability_normalization_300
    n_gram_entropy_summary_n2_mdf100
    n_gram_entropy_average_n2_mdf100
    n_gram_probability_summary_n2_mdf100
    n_gram_probability_average_n2_mdf100
    n_gram_probability_normalization_n2_mdf100
    ave_word_length
    word_df_entropy_sum_true_50
    word_df_entropy_average_true_50
    word_df_probability_sum_true_50
    word_df_probability_ave_true_50
    word_df_probability_norm_true_50
    word_df_probability_sum_sum_true_50
    word_df_probability_ave_sum_true_50
    3gram_df_entropy_sum_true_50
    3gram_df_entropy_average_true_50
    3gram_df_probability_sum_true_50
    3gram_df_probability_ave_true_50
    3gram_df_probability_norm_true_50
    3gram_df_probability_sum_sum_true_50
    3gram_df_probability_ave_sum_true_50
    4gram_df_entropy_sum_true_50
    4gram_df_entropy_average_true_50
    4gram_df_probability_sum_true_50
    4gram_df_probability_ave_true_50
    4gram_df_probability_norm_true_50
    4gram_df_probability_sum_sum_true_50
    4gram_df_probability_ave_sum_true_50
    word_df_entropy_sum_false_50
    word_df_entropy_average_false_50
    word_df_probability_sum_false_50
    word_df_probability_ave_false_50
    word_df_probability_norm_false_50
    word_df_probability_sum_sum_false_50
    word_df_probability_ave_sum_false_50
    3gram_df_entropy_sum_false_50
    3gram_df_entropy_average_false_50
    3gram_df_probability_sum_false_50
    3gram_df_probability_ave_false_50
    3gram_df_probability_norm_false_50
    3gram_df_probability_sum_sum_false_50
    3gram_df_probability_ave_sum_false_50
    4gram_df_entropy_sum_false_50
    4gram_df_entropy_average_false_50
    4gram_df_probability_sum_false_50
    4gram_df_probability_ave_false_50
    4gram_df_probability_norm_false_50
    4gram_df_probability_sum_sum_false_50
    4gram_df_probability_ave_sum_false_50

single_run = {
    'cv_id': 0,
    'cv_num': 5,
    'score': {}
    }

cross_validation = {
    'cv_num': 5,
    'score': {},
    'eval_metric': 'ave_f1',
    'enable_online': 'true',
    }

[MODEL]

type = xgb

xgb = {
    'objective': 'multi:softmax',
    'booster': 'gbtree',
    'eval_metric': 'merror',
    'eta': 0.2,
    'max_depth': 10,
    'silent': 1,
    'nthread': 4,
    'num_class': 4,
    'num_round': 1500,
    'early_stop': 150,
    'verbose_eval': 50,
    'subsample': 0.67,
	'colsample_bytree': 0.67,
	'min_child_weight': 30,
    }
